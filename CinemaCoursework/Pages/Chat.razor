@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using CinemaCoursework.Data
@using CinemaCoursework.Services
@inject PagesList pageList
@inject NavigationManager Navigation
@inject DataBase dataBase
@implements IAsyncDisposable

<PageTitle>Чат</PageTitle>

<style type="text/css">
    .lblTwo, .message {
        font-size: 23px;
    }

    .field {
        width: 700px;
        height: 200px;
        background: #9F4FF9;
        border-radius: 20px;
        font-size: 20px;
        padding: 7px;
    }

    button {
        height: 50px;
        width: 100px;
        background: #9F4FF9;
        border-radius: 15px;
        font-size: 20px;
    }
</style>

<div class="form-group">
    <table>
        <tr>
            <td>
                <label class="lblTwo"> Сообщение:</label>
                <br/>
                <textarea rows="10" class="field" id="description" type="text" @bind="messageInput" />
            </td>
        </tr>
        <tr><td><label></label></td></tr>
    </table>
</div>

<button @onclick="Send" disabled="@(!IsConnected)">Отправить</button>
<br/><br/>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li class="message">@message</li>
        <hr>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        if (dataBase.CurrentUser.Role == "Admin")
        {
            userInput = "Администратор";
        }
        else
        {
            userInput = dataBase.CurrentUser.Surname + " " + dataBase.CurrentUser.Name + " " + dataBase.CurrentUser.Patronymic;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"- {user}: \"{message}\"";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await GetPageName();
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task GetPageName()
    {
        pageList.PageName = "Chat";
        await base.OnInitializedAsync();
    }
}