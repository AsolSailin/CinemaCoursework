@page "/"
@using CinemaCoursework.Data
@using CinemaCoursework.Services
@inject PagesList pageList
@inject DataBase dataBase
@inject IJSRuntime JS
@inject NavigationManager navigation
@inject ILocalStorageService localStorageService

<PageTitle>Authorization</PageTitle>

<style type="text/css">
    .lbl {
        font-size: 23px;
    }

    .field {
        width: 85%;
        background: #9F4FF9;
        border-radius: 20px;
        font-size: 20px;
    }

    .button {
        position: absolute;
        left: 25%;
        height: 20%;
        width: 35%;
        background: #9F4FF9;
        border-radius: 15px;
        font-size: 23px;
    }

    .href {
        color: #9F4FF9;
    }

    .alignment {
        position: absolute;
        left: 50%;
    }

    .block {
        position: absolute;
        left: 49%;
        top: 30%;
    }
</style>

<div class="block">
    <label class="lbl">Логин:</label>
    <input class="field" id="login" type="text" @bind-value="@user.Login"><br />
    <label class="lbl">Пароль:</label>
    <input class="field" id="password" type="password" @bind-value="@user.Password"><br /><br />

    <button class="button" @onclick="LogIn">Войти</button> <br /><br />
    <div class="aligment">
        <p>Нет аккаунта?<NavLink href="registration" class="href">Зарегистрируйся</NavLink></p>
    </div>
</div>

@code {
    private User user = new User();

    public void LogIn()
    {
        if (user.Login != null && user.Password != null)
        {
            dataBase.CurrentUser = dataBase.FindByUserLogin(user.Login);

            if (dataBase.CurrentUser != null && dataBase.CurrentUser.Password == user.Password)
            {
                localStorageService.SetAsync<User>("Authorization", dataBase.CurrentUser);
                if (dataBase.CurrentUser.Role == "Client")
                {
                    navigation.NavigateTo("/client_account");
                }
                else if (dataBase.CurrentUser.Role == "Admin")
                {
                    navigation.NavigateTo("/admin_account");
                }
            }
            else
            {
                JS.InvokeVoidAsync("alert", "Неверный логин или пароль");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetPageName();
    }

    public async Task GetPageName()
    {
        pageList.PageName = "Authorization";
        await base.OnInitializedAsync();
    }
}